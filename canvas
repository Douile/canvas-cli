#!/bin/bash
set -e

#get/check canvas token
get_canvas_token() {
    if [ -f $SETTINGS_LOCATION ]; then
        settings=$(cat "$SETTINGS_LOCATION")
        settingsArr=(${settings//|/ })
        CANVAS_URL="${settingsArr[0]}"
        CANVAS_TOKEN="${settingsArr[1]}"

        #change option enabled
        if [ "$CHANGE_ENABLED" = true ]; then
            read -p "Enter canvas url (e.g. liverpool.instructure.com): " tmpUrl
            if [ "$tmpUrl" != "" ]; then 
                CANVAS_URL="https://$tmpUrl"
            fi
            read -p "Enter canvas token: " tmpToken
            if [ "$tmpToken" != "" ]; then
                CANVAS_TOKEN="$tmpToken"
            fi
            if [ "$(check_canvas_token "$CANVAS_TOKEN")" = "200" ]; then
                rm -f $SETTINGS_LOCATION
                echo $(echo -ne "$CANVAS_URL|$CANVAS_TOKEN" > $SETTINGS_LOCATION)
                chmod 400 $SETTINGS_LOCATION
            else
                get_canvas_token
            fi
        fi
    else
        read -p "Enter canvas url (e.g. liverpool.instructure.com): " CANVAS_URL
        CANVAS_URL="https://$CANVAS_URL"
        read -p "Enter canvas token: " CANVAS_TOKEN
        echo $(echo -ne "$CANVAS_URL|$CANVAS_TOKEN" > $SETTINGS_LOCATION)
        chmod 400 $SETTINGS_LOCATION
    fi
}

check_canvas_token() {
    curl -so /dev/null -w "%{http_code}" -H "Authorization: Bearer $1" "$CANVAS_URL/api/v1/accounts"
}

setup() {
    if [ "$1" = "-c" ]; then
        CHANGE_ENABLED=true
    fi

    get_canvas_token
    check_status=$(check_canvas_token "$CANVAS_TOKEN")
    while [ "$check_status" != "200" ]; do
        echo
        rm -f $SETTINGS_LOCATION
        get_canvas_token
        check_status=$(check_canvas_token "$CANVAS_TOKEN")
        echo $check_status
    done
}

loader() {
    str="Loading"
    echo -ne "$str\r"
    while true; do
        str="$str."
        if [ $str = "Loading....." ]; then
            echo -ne "           \r"
            str="Loading"
        fi
        echo -ne "$str\r"
        sleep .5
    done
}

startLoader() {
    loader &
    LOADER_PID=$!
    trap "kill -9 $LOADER_PID" `seq 0 15`
}

CANVAS_URL=""
CANVAS_TOKEN=""
SETTINGS_LOCATION=~/.config/canvas_settings
CHANGE_ENABLED=false

subcommand=$1
if [ "$subcommand" = "null" ] || [ "$subcommand" = "" ]; then
    subcommand="h"
else
    shift
fi
case "$subcommand" in
    h|help|"-h"|"--help" )
        echo
        echo -e "Usage:\n\tcanvas <operation> -h,Display help for specific operation.\n\tcanvas <operation> [option],Execute one of the operations below." | column -t -s ','
        echo -e "Operations:\n\th help,Display this help message.\n\tu upcoming,Display any assignments which are due in the future.\n\tg grades,Display submitted assignments and grades.\n\ts settings,Change your canvas url or token." | column -t -s ','
        echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
        exit 0
        ;;
    u|upcoming )
        compact=false
        blankMode=false
        onlyFavCourses=false
        includeLocked=false
        includeSubmitted=false
        filterCourses=false
        courseList=()

        while getopts ":hcbflsm:" opt; do
            case $opt in
                h ) echo -e "\nUsage:\n\tcanvas u [option]\n\tcanvas upcoming [option]"
                    echo -e "Options:\n\t-h,Display this help message.\n\t-c,Display the output in compact style.\n\t-b,Enable blank mode so the output doesn't use colours.\n\t-f,Display only favourited courses.\n\t-l,Display assignments which haven't yet unlocked.\n\t-s,Display submitted assignments.\n\t-m [code],Display only specific courses. Courses should be specified as 3 digit numeric codes separated by a comma." | column -t -s ','
                    echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
                    exit 0
                    ;;
                c ) compact=true;;
                b ) blankMode=true;;
                f ) onlyFavCourses=true;;
                l ) includeLocked=true;;
                s ) includeSubmitted=true;;
                m ) case $OPTARG in
                        : ) echo "Invalid Option: -m requires an argument" 1>&2
                            exit 1
                            ;;
                        "" ) ;;
                        * ) filterCourses=true
                            while IFS=',' read -ra courses; do
                                for i in "${courses[@]}"; do
                                    if [ "$i" != "" ]; then
                                        courseList+=( ${i:0:3} )
                                    fi
                                done
                            done <<< $(echo "$OPTARG" | sed 's/[^0-9,]*//g')
                            if [ ${#courseList[@]} = "0" ]; then
                                echo "Invalid course(s) '$OPTARG': see -h for more info" 1>&2
                                exit 1
                            fi
                            ;;
                    esac
                    ;;
                \? ) echo "Invalid Option: -$OPTARG" 1>&2
                     exit 1
                     ;;
            esac
        done

        setup

        #define vars for assignments
        RED='\033[0;91m'
        GREEN='\033[0;92m'
        ORANGE='\033[0;93m'
        NC='\033[0m'
        COURSE_URL="$CANVAS_URL/api/v1/courses"
        if [ "$onlyFavCourses" = true ]; then
            COURSE_URL="$CANVAS_URL/api/v1/users/self/favorites/courses"
        fi
        today=$(date +"%s")
        twoDays=$(date -d "+2days" +"%s")
        oneWeek=$(date -d "+7days" +"%s")
        colorsArray=()
        titlesArray=()
        deadlinesArray=()
        coursesArray=()
        unlocksAtArray=()

        startLoader

        #for each course
        for course in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$COURSE_URL" | jq -r '.[] | @base64'); do

            _jqCourse() {
                echo ${course} | base64 --decode | jq -r ${1}
            }

            course_code="$(_jqCourse '.course_code')"
            if [ "$filterCourses" = false ] || [[ " ${courseList[@]} " =~ " ${course_code:4:3} " ]]; then
            
                for row in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$CANVAS_URL/api/v1/courses/$(_jqCourse '.id')/assignments?order_by=due_at&include[]=submission" | jq -r '.[] | @base64'); do

                    _jqRow() {
                        echo ${row} | base64 --decode | jq -r ${1}
                    }

                    unlock_at=$(_jqRow '.unlock_at')
                    due_at=$(_jqRow '.due_at')
                    lock_at=$(_jqRow '.lock_at')

                    #need to check if unlock_at is null or in the past
                    if [ "$includeLocked" = true ] || [ "$unlock_at" = "null" ] || [ "$(date -d $unlock_at +"%s")" -le $today ]; then
                        #need to check if due_at is in the future
                        if [ "$due_at" != "null" ] && [ "$(date -d $due_at +"%s")" -ge $today ]; then
                            #need to check if lock_at is null or in the future
                            if [ "$lock_at" = "null" ] || [ "$(date -d $lock_at +"%s")" -ge $today ]; then
                                deadline=$(date -d $due_at +"%s")
                                if [ $lock_at != "null" ] && [ $(date -d $lock_at +"%s") -le $deadline ]; then
                                    deadline=$(date -d $lock_at +"%s")
                                fi
                                color=${NC}
                                if [ $(_jqRow '.submission' | jq -r '.workflow_state') != "unsubmitted" ]; then
                                    if [ "$includeSubmitted" = false ]; then
                                        continue
                                    fi
                                    color=${GREEN}
                                elif [ "$deadline" -le "$twoDays" ]; then
                                    color=${RED}
                                elif [ "$deadline" -le "$oneWeek" ]; then
                                    color=${ORANGE}
                                fi
                                colorsArray+=( "$color" )
                                titlesArray+=( "$(_jqRow '.name')" )
                                deadlinesArray+=( "$(date -d $due_at +"%a %d %b %Y %H:%M")" )
                                coursesArray+=( ${course_code:4:3} )
                                if [ "$includeLocked" = true ]; then
                                    if [ "$unlock_at" = "null" ] || [ "$(date -d $unlock_at +"%s")" -le $today ]; then
                                        unlocksAtArray+=( "" )
                                    else
                                        unlocksAtArray+=( "$(date -d $unlock_at +"%a %d %b %Y %H:%M")" )
                                    fi
                                fi
                            fi
                        fi
                    fi


                done
            fi
        done

        #output
        tableHeaders=""
        if [ "$compact" = true ]; then
            tableHeaders="Course,Title,Deadline"
            if [ "$includeLocked" = true ]; then
                tableHeaders="$tableHeaders,Unlocks At"
            fi
        fi
        lastCourse=""
        printf "\033[1;2m"
        for ((i=0; i<${#titlesArray[@]}; i++)); do
            if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                if [ "$lastCourse" != "" ]; then
                    echo -e "||"
                fi
                if [ "$compact" = false ]; then
                    echo -e "\033[1;2m${coursesArray[i]}"
                    fi
                    lastCourse=${coursesArray[i]}
                fi
            line="${titlesArray[i]}${NC}|${deadlinesArray[i]}"
            if [ "$blankMode" = false ]; then
                line="${colorsArray[i]}$line"
            fi
            if [ "$compact" = true ]; then
                line="${NC}${coursesArray[i]}|$line"
            fi
            if [ "$includeLocked" = true ]; then
                line="$line|${unlocksAtArray[i]}"
            fi
            echo -e "$line"
        done | column -t -s '|' -N "$tableHeaders"
        ;;
    g|grades )
        compact=false
        blankMode=false
        onlyFavCourses=false
        filterCourses=false
        courseList=()

        while getopts ":hcbfm:" opt; do
            case $opt in
                h ) echo -e "\nUsage:\n\tcanvas g [option]\n\tcanvas grades [option]"
                    echo -e "\nOptions:\n\t-h,Display this help message.\n\t-c,Display the output in compact style.\n\t-b,Enable blank mode so the output doesn't use colours.\n\t-f,Display only favourited courses.\n\t-m [code],Display only specific courses. Courses should be specified as 3 digit numeric codes separated by a comma." | column -t -s ','
                    echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
                    exit 0
                    ;;
                c ) compact=true;;
                b ) blankMode=true;;
                f ) onlyFavCourses=true;;
                m ) case $OPTARG in
                        : ) echo "Invalid Option: -m requires an argument" 1>&2
                            exit 1
                            ;;
                        "" ) ;;
                        * ) filterCourses=true
                            while IFS=',' read -ra courses; do
                                for i in "${courses[@]}"; do
                                    if [ "$i" != "" ]; then
                                        courseList+=( ${i:0:3} )
                                    fi
                                done
                            done <<< $(echo "$OPTARG" | sed 's/[^0-9,]*//g')
                            if [ ${#courseList[@]} = "0" ]; then
                                echo "Invalid course(s) '$OPTARG': see -h for more info" 1>&2
                                exit 1
                            fi
                            ;;
                    esac
                    ;;
                \? ) echo "Invalid Option: -$OPTARG" 1>&2
                     exit 1
                     ;;
            esac
        done

        setup

        #define vars for assignments
        RED='\033[0;91m'
        GREEN='\033[0;92m'
        ORANGE='\033[0;93m'
        NC='\033[0m'
        today=$(date +"%s")
        twoDays=$(date -d "+2days" +"%s")
        oneWeek=$(date -d "+7days" +"%s")
        colorsArray=()
        titlesArray=()
        coursesArray=()
        scoresArray=()
        outOfArray=()
        COURSE_URL="$CANVAS_URL/api/v1/courses"
        if [ "$onlyFavCourses" = true ]; then
            COURSE_URL="$CANVAS_URL/api/v1/users/self/favorites/courses"
        fi

        startLoader

        #for each course
        for course in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$COURSE_URL" | jq -r '.[] | @base64'); do

            _jqCourse() {
                echo ${course} | base64 --decode | jq -r ${1}
            }

            course_code="$(_jqCourse '.course_code')"
            if [ "$filterCourses" = false ] || [[ " ${courseList[@]} " =~ " ${course_code:4:3} " ]]; then
            
                for row in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$CANVAS_URL/api/v1/courses/$(_jqCourse '.id')/students/submissions?order=graded_at&include[]=assignment" | jq -r '.[] | @base64'); do

                    _jqRow() {
                        echo ${row} | base64 --decode | jq -r ${1}
                    }

                    if [ $(_jqRow '.workflow_state') != "unsubmitted" ]; then
                        colorsArray+=( "$color" )
                        titlesArray+=( "$(_jqRow '.assignment' | jq -r '.name')" )
                        coursesArray+=( ${course_code:4:3} )
                        score="$(_jqRow '.score')"
                        if [ "$score" = "null" ] || [ "$score" = "0" ]; then
                            score="-"
                        fi
                        scoresArray+=( "$score" )
                        outOf="$(_jqRow '.assignment' | jq -r '.points_possible')"
                        if [ "$outOf" = "null" ] || [ "$outOf" = "0" ]; then
                            outOf="-"
                        fi
                        outOfArray+=( "$outOf" )
                    fi
                done
            fi
        done

        #output
        tableHeaders=""
        if [ "$compact" = true ]; then
            tableHeaders="Course,Title,Score,Out Of,Grade"
        fi
        lastCourse=""
        printf "\033[1;2m"
        for ((i=0; i<${#titlesArray[@]}; i++)); do
            if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                if [ "$lastCourse" != "" ]; then
                    echo -e "|||"
                fi
                if [ "$compact" = false ]; then
                    echo -e "\033[1;2m${coursesArray[i]}${NC}"
                fi
                lastCourse=${coursesArray[i]}
            fi
            color=$NC
            if [ "${outOfArray[i]}" = "-" ]; then
                grade="-"
            else
                grade="$(((scoresArray[i] * 100) / outOfArray[i]))"
                if [ "$blankMode" = false ]; then
                    if [ "$grade" -eq "100" ]; then
                        color=$GREEN
                    elif [ "$grade" -ge "80" ]; then
                        color=$ORANGE
                    elif [ "$grade" -le "40" ]; then
                        color=$RED
                    fi
                fi
                grade="$grade%"
            fi
            line="$color${titlesArray[i]}$NC|${scoresArray[i]}|${outOfArray[i]}|$grade"
            if [ "$compact" = true ]; then
                line="${NC}${coursesArray[i]}|$line"
            fi
            echo -e "$line"
        done | column -t -s '|' -N "$tableHeaders"
        ;;
    s|settings )
        setup -c
        ;;
    * )
        echo "Canvas CLI: Unknown command. See canvas h for help."
        exit 0
        ;;
esac
